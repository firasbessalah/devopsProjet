pipeline {
    agent any

    stages {
        // Étape 1 : Compilation du projet
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Étape 2 : Analyse SonarQube
        stage('MVN Sonarqube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_9cf9850fd06e499c5d1600a4aba4595c5c767100 -Dmaven.test.skip=true'
            }
        }

        // Étape 3 : Installation du projet
        stage('Install') {
            steps {
                sh 'mvn clean install -Dmaven.test.skip=true'
            }
        }

        // Étape 4 : Déploiement sur Nexus
        stage('MVN Nexus') {
            steps {
                sh 'mvn deploy -Dmaven.test.skip=true'
            }
        }

        // Étape 5 : Construction des images Docker
        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

        // Étape 6 : Authentification à Docker Hub
       stage('Login to DockerHub') {
            steps {
                script {
              withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'

                    }
                }
            }
        }
        // Étape 7 : Pousser les images Docker vers Docker Hub
        stage('Push Docker Image') {
            steps {
                sh 'docker-compose push'
            }
        }

        // Étape 8 : Déploiement avec docker-compose
        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        // Étape 9 : Vérification du déploiement
        stage('Verify Deployment') {
            steps {
                script {
                    // Réessayer jusqu'à 5 fois, avec une attente de 10 secondes entre chaque tentative
                    retry(5) {
                        sleep 10 // Attendre 10 secondes avant chaque tentative
                        sh 'curl -I http://192.168.65.129:8089/kaddem'
                    }
                }
            }
        }
    }
}
