pipeline {
    agent none // Start with no global agent

    stages {
        // Stages that run on Linux controller (built-in node)
        stage('Compile & Test') {
            agent {
                label 'master' // Most Jenkins setups use 'master' as the built-in node label
            }
            steps {
                sh 'mvn clean compile'
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    error("‚ùå Unit tests failed! Pipeline stopped.")
                }
            }
        }

        stage('SonarQube Analysis') {
            agent {
                label 'master'
            }
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_9cf9850fd06e499c5d1600a4aba4595c5c767100 -Dmaven.test.skip=true'
            }
        }

        // Stages that run on Windows (esprit agent)
        stage('Build & Deploy') {
            agent {
                label 'esprit' // Your Windows agent label
  customWorkspace 'C:\\ag\\workspace\\${JOB_NAME}'
            }
            stages {
                stage('Install') {
                    steps {
                        bat 'mvn clean install -Dmaven.test.skip=true'
                    }
                }

                stage('Nexus Deploy') {
                    steps {
                        bat 'mvn deploy -Dmaven.test.skip=true'
                    }
                }

                stage('Docker Operations') {
                    steps {
                        script {
                            stage('Build Images') {
                                bat 'docker-compose build'
                            }
                            
                            stage('Login to DockerHub') {
                                withCredentials([usernamePassword(
                                    credentialsId: 'docker-hub-credentials', 
                                    usernameVariable: 'DOCKER_USERNAME', 
                                    passwordVariable: 'DOCKER_PASSWORD'
                                )]) {
                                    bat 'echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin'
                                }
                            }
                            
                            stage('Push Images') {
                                bat 'docker-compose push'
                            }
                            
                            stage('Deploy') {
                                bat 'docker-compose up -d'
                            }
                        }
                    }
                }
            }
        }

        // Verification stages can run on any available node
        stage('Verify Deployment') {
            agent any
            steps {
                retry(5) {
                    sleep 10
                    script {
                        if (isUnix()) {
                            sh 'curl -I http://192.168.152.129:8089/kaddem'
                        } else {
                            bat 'curl -I http://192.168.152.129:8089/kaddem'
                        }
                    }
                }
            }
        }

        stage('Test Prometheus Metrics') {
            agent any
            steps {
                script {
                    def prometheus_url = 'http://192.168.152.129:9090/api/v1/query'
                    def query = 'up{job="spring-boot-application"}'
                    def response = sh(script: "curl -s ${prometheus_url}?query=${query}", returnStdout: true)
                    echo "Prometheus Response: ${response}"
                }
            }
        }
    }
}
